name: Test

on:
  push:
    branches:
      - '**'
      - '!dependabot/**'
    tags:
      - '**'
  pull_request:

jobs:
  test:
    name: "Ruby ${{ matrix.ruby-version }}: ${{ matrix.runs-on }}"
    strategy:
      fail-fast: false
      matrix:
        ruby-version:
          - "3.2"
          - "3.3"
          - "3.4"
        runs-on:
          # - macos-latest
          - ubuntu-latest
          # - windows-latest
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
        # We can't use "bundler-cache: true" with ruby/setup-ruby
        # because it doesn't cache dependencies installed by
        # rubygems-requirements-system automatically.
      # This is a workaround.
      - name: Install the specific version of Apache Arrow
        run: |
          sudo apt update
          sudo apt install -y -V ca-certificates lsb-release wget
          wget https://packages.apache.org/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
          sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
          sudo apt update
          arrow_version=20.0.0
          adbc_version=19
          sudo apt install -y -V \
            gir1.2-adbc-1.0=${adbc_version}-1 \
            gir1.2-adbc-arrow-1.0=${adbc_version}-1 \
            gir1.2-arrow-1.0=${arrow_version}-1 \
            libadbc-arrow-glib-dev=${adbc_version}-1 \
            libadbc-driver-manager-dev=${adbc_version}-1 \
            libadbc-glib-dev=${adbc_version}-1 \
            libadbc-glib-dev=${adbc_version}-1 \
            libarrow-acero-dev=${arrow_version}-1 \
            libarrow-dev=${arrow_version}-1 \
            libarrow-glib-dev=${arrow_version}-1 \
            libparquet-dev=${arrow_version}-1
      - name: Install dependencies
        run: |
          MAKEFLAGS="-j$(nproc)" bundle install --jobs=$(nproc)
      - name: Prepare test environment
        run: |
          sudo apt install -y -V \
            libadbc-driver-postgresql-dev \
            libadbc-driver-sqlite-dev \
            postgresql
          sudo systemctl restart postgresql
          sudo -u postgres -H psql -c "CREATE ROLE ${USER} SUPERUSER LOGIN;"
      - name: "Test: SQLite3"
        run: |
          bundle exec rake
      - name: "Test: PostgreSQL"
        env:
          ACTIVERECORD_ADBC_ADAPTER_BACKEND: postgresql
        run: |
          bundle exec rake
      - name: Benchmark
        run: |
          bundle exec benchmark/load-dump.rb
